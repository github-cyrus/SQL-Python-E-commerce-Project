import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import mysql.connector
db = mysql.connector.connect(host = "localhost",
                            username = "cyrus",
                            password = "kali",
                            database = "ecommerce")

cur = db.cursor()

#Writing Sql Query Over Here 

#List all unique cities where customers are located.

query = """ select distinct customer_city from customers """
# 1. List all unique cities where customers are located
query1 = "SELECT DISTINCT customer_city FROM customers"
cur.execute(query1)
unique_cities = cur.fetchall()
print("Unique cities:", unique_cities)

# 2. Count the number of orders placed in 2017
query2 = "SELECT COUNT(*) FROM orders WHERE YEAR(order_date) = 2017"
cur.execute(query2)
orders_2017 = cur.fetchone()[0]
print("Orders in 2017:", orders_2017)

# 3. Find the total sales per category
query3 = """
SELECT category, SUM(sales) AS total_sales 
FROM products JOIN orders ON products.product_id = orders.product_id 
GROUP BY category
"""
cur.execute(query3)
total_sales_per_category = cur.fetchall()
print("Total sales per category:", total_sales_per_category)

# 4. Calculate the percentage of orders that were paid in installments
query4 = """
SELECT 
    (COUNT(*) FILTER (WHERE payment_type = 'Installments') * 100.0 / COUNT(*)) 
    AS installment_percentage 
FROM orders
"""
cur.execute(query4)
installment_percentage = cur.fetchone()[0]
print("Installment payment percentage:", installment_percentage)

# 5. Count the number of customers from each state
query5 = "SELECT state, COUNT(DISTINCT customer_id) FROM customers GROUP BY state"
cur.execute(query5)
customers_per_state = cur.fetchall()
print("Customers per state:", customers_per_state)

# 1. Calculate the number of orders per month in 2018
query6 = """
SELECT MONTH(order_date) AS month, COUNT(*) AS orders_count 
FROM orders 
WHERE YEAR(order_date) = 2018 
GROUP BY month
"""
cur.execute(query6)
orders_per_month_2018 = cur.fetchall()
print("Orders per month in 2018:", orders_per_month_2018)

# 2. Find the average number of products per order, grouped by customer city
query7 = """
SELECT customer_city, AVG(product_count) AS avg_products_per_order 
FROM (
    SELECT customer_city, order_id, COUNT(product_id) AS product_count 
    FROM customers 
    JOIN orders ON customers.customer_id = orders.customer_id 
    JOIN order_items ON orders.order_id = order_items.order_id 
    GROUP BY customer_city, order_id
) AS city_order_counts
GROUP BY customer_city
"""
cur.execute(query7)
avg_products_per_order_city = cur.fetchall()
print("Average products per order by city:", avg_products_per_order_city)

# 3. Calculate the percentage of total revenue contributed by each product category
query8 = """
SELECT category, 
       (SUM(sales) * 100.0 / (SELECT SUM(sales) FROM orders)) AS revenue_percentage 
FROM products 
JOIN orders ON products.product_id = orders.product_id 
GROUP BY category
"""
cur.execute(query8)
revenue_percentage_category = cur.fetchall()
print("Revenue percentage by category:", revenue_percentage_category)

# 4. Correlation between product price and number of purchases
# Note: Requires manual calculation of correlation in Python
query9 = """
SELECT product_id, product_price, COUNT(order_id) AS purchase_count 
FROM products 
JOIN order_items ON products.product_id = order_items.product_id 
GROUP BY product_id, product_price
"""
cur.execute(query9)
price_purchase_data = pd.DataFrame(cur.fetchall(), columns=['product_id', 'product_price', 'purchase_count'])
correlation = price_purchase_data['product_price'].corr(price_purchase_data['purchase_count'])
print("Correlation between price and purchases:", correlation)

# 5. Total revenue generated by each seller, ranked by revenue
query10 = """
SELECT seller_id, SUM(sales) AS total_revenue 
FROM orders 
GROUP BY seller_id 
ORDER BY total_revenue DESC
"""
cur.execute(query10)
seller_revenue = cur.fetchall()
print("Seller revenue (ranked):", seller_revenue)
# 1. Calculate the moving average of order values for each customer
# Requires fetching data into Pandas
query11 = """
SELECT customer_id, order_date, SUM(sales) AS order_value 
FROM orders 
GROUP BY customer_id, order_date
"""
cur.execute(query11)
order_data = pd.DataFrame(cur.fetchall(), columns=['customer_id', 'order_date', 'order_value'])
order_data['order_date'] = pd.to_datetime(order_data['order_date'])
order_data.sort_values(by=['customer_id', 'order_date'], inplace=True)
order_data['moving_avg'] = order_data.groupby('customer_id')['order_value'].rolling(3, min_periods=1).mean().reset_index(0, drop=True)
print("Moving average of order values:", order_data)

# 2. Cumulative sales per month for each year
query12 = """
SELECT YEAR(order_date) AS year, MONTH(order_date) AS month, SUM(sales) AS monthly_sales 
FROM orders 
GROUP BY year, month
"""
cur.execute(query12)
cumulative_sales_data = pd.DataFrame(cur.fetchall(), columns=['year', 'month', 'monthly_sales'])
cumulative_sales_data['cumulative_sales'] = cumulative_sales_data.groupby('year')['monthly_sales'].cumsum()
print("Cumulative sales:", cumulative_sales_data)

# 3. Year-over-year growth rate of total sales
query13 = """
SELECT YEAR(order_date) AS year, SUM(sales) AS yearly_sales 
FROM orders 
GROUP BY year
"""
cur.execute(query13)
sales_data = pd.DataFrame(cur.fetchall(), columns=['year', 'yearly_sales'])
sales_data['yoy_growth'] = sales_data['yearly_sales'].pct_change() * 100
print("Year-over-year growth rate:", sales_data)

# 4. Customer retention rate
query14 = """
WITH first_order AS (
    SELECT customer_id, MIN(order_date) AS first_order_date 
    FROM orders 
    GROUP BY customer_id
)
SELECT 
    (COUNT(DISTINCT o.customer_id) * 100.0 / COUNT(DISTINCT fo.customer_id)) AS retention_rate 
FROM first_order fo 
LEFT JOIN orders o 
ON fo.customer_id = o.customer_id AND o.order_date > DATE_ADD(fo.first_order_date, INTERVAL 6 MONTH)
"""
cur.execute(query14)
retention_rate = cur.fetchone()[0]
print("Retention rate:", retention_rate)

# 5. Top 3 customers by spending in each year
query15 = """
SELECT year, customer_id, total_spent 
FROM (
    SELECT YEAR(order_date) AS year, customer_id, SUM(sales) AS total_spent, 
           RANK() OVER (PARTITION BY YEAR(order_date) ORDER BY SUM(sales) DESC) AS rank 
    FROM orders 
    GROUP BY year, customer_id
) ranked_customers
WHERE rank <= 3
"""
cur.execute(query15)
top_customers = cur.fetchall()
print("Top 3 customers by year:", top_customers)

cur.execute(query)
data = cur.fetchall()
data
